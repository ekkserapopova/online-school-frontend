import React, { useEffect } from 'react';
import './TaskAttemptsList.css';
import { StudentTask } from '../../modules/task';

interface TaskAttemptsListProps {
  attempts: StudentTask[] | Array<any>;
  taskId: number;
  onSelectAttempt: (code: string, attemptId: number) => void;
  activeAttemptId?: number;
  onSolveAgain: () => void; 
  finalscore: number | null;
}

const TaskAttemptsList: React.FC<TaskAttemptsListProps> = ({ 
  attempts, 
  onSelectAttempt,
  activeAttemptId,
  onSolveAgain,
  finalscore
}) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ attempts - —ç—Ç–æ –º–∞—Å—Å–∏–≤
  const attemptsList = Array.isArray(attempts) ? attempts : [];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
  const formatDate = (dateString: string): string => {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    }).format(date);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ø—ã—Ç–∫–∏
  const getStatusText = (status: string): string => {
    switch (status) {
      case 'in progress': return '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è';
      case 'canceled': return '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ';
      case 'completed': return '–ü—Ä–∏–Ω—è—Ç–æ';
      default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ø—ã—Ç–∫–∏
  const getStatusClass = (status: string): string => {
    switch (status) {
      case 'in progress': return 'status-pending';
      case 'canceled': return 'status-rejected';
      case 'completed': return 'status-approved';
      default: return '';
    }
  };

  useEffect(() => {
    console.log('final score', finalscore);
  }
  , []);

  return (
    <div className="task-attempts">
      <h2 className="task-attempts__title">–ò—Å—Ç–æ—Ä–∏—è —Ä–µ—à–µ–Ω–∏–π</h2>
      {/* –ë–ª–æ–∫ —Å –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–æ–π */}
      <div className="task-attempts__final-score">
        <div className="task-attempts__final-score-content">
          <span className="task-attempts__final-score-label">–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:</span>
          <span className="task-attempts__final-score-value">{finalscore ? finalscore : (finalscore === 0? 0:"ü§∑‚Äç‚ôÄÔ∏è")}</span>
        </div>
        <div className="task-attempts__final-score-calc-hint">
          —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ
        </div>
      </div>
      {/* –ö–Ω–æ–ø–∫–∞ "–†–µ—à–∏—Ç—å –µ—â–µ —Ä–∞–∑" –≤ –Ω–∞—á–∞–ª–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ */}
      <div className="task-attempts__new-solution">
        <button 
          className="task-attempts__solve-again-btn"
          onClick={onSolveAgain}
        >
          –†–µ—à–∏—Ç—å –µ—â–µ —Ä–∞–∑
        </button>
      </div>
      
      {attemptsList.length === 0 ? (
        <div className="task-attempts__empty">
          –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
        </div>
      ) : (
        <ul className="task-attempts__list">
          {attemptsList.map((attempt) => (
            <li 
              key={attempt.id} 
              className={`task-attempt ${activeAttemptId === attempt.id ? 'task-attempt--active' : ''}`}
              onClick={() => onSelectAttempt(attempt.code, attempt.id)}
            >
              <div className="task-attempt__header">
                <span className="task-attempt__date">
                  {formatDate(attempt.created_at)}
                </span>
                <span className={`task-attempt__status ${getStatusClass(attempt.status)}`}>
                  {getStatusText(attempt.status)}
                </span>
              </div>
              
              <div className="task-attempt__code-preview">
                {attempt.code?.split('\n').slice(0, 3).join('\n')}
                {(attempt.code?.split('\n').length || 0) > 3 && '...'}
              </div>
              
              {attempt.score !== undefined && (
                <div className="task-attempt__grade">
                  –û—Ü–µ–Ω–∫–∞: <span>{attempt.score}</span>
                </div>
              )}
            </li>
          ))}
        </ul>
      )}
      
      <div className="task-attempts__info">
        <p>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—à–µ–Ω–∏–µ</p>
      </div>
    </div>
  );
};

export default TaskAttemptsList;